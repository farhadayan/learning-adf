{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          {alpha-2} as string,",
				"          {alpha-3} as string,",
				"          {country-code} as string,",
				"          {iso_3166-2} as string,",
				"          region as string,",
				"          {sub-region} as string,",
				"          {intermediate-region} as string,",
				"          {region-code} as string,",
				"          {sub-region-code} as string,",
				"          {intermediate-region-code} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source2",
				"source1 filter(rlike(name, 'Afghanistan')) ~> filter1",
				"filter1 select(mapColumn(",
				"          name,",
				"          {country-code},",
				"          region,",
				"          {intermediate-region-code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 cast(output(",
				"          {country-code} as integer '000'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          name as string,",
				"          {alpha-2} as string,",
				"          {alpha-3} as string,",
				"          {country-code} as string,",
				"          {iso_3166-2} as string,",
				"          region as string,",
				"          {sub-region} as string,",
				"          {intermediate-region} as string,",
				"          {region-code} as string,",
				"          {sub-region-code} as string,",
				"          {intermediate-region-code} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}